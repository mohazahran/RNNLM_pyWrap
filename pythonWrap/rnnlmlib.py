# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rnnlmlib')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rnnlmlib')
    _rnnlmlib = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rnnlmlib', [dirname(__file__)])
        except ImportError:
            import _rnnlmlib
            return _rnnlmlib
        try:
            _mod = imp.load_module('_rnnlmlib', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rnnlmlib = swig_import_helper()
    del swig_import_helper
else:
    import _rnnlmlib
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

MAX_STRING = _rnnlmlib.MAX_STRING
class neuron(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neuron, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neuron, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ac"] = _rnnlmlib.neuron_ac_set
    __swig_getmethods__["ac"] = _rnnlmlib.neuron_ac_get
    if _newclass:
        ac = _swig_property(_rnnlmlib.neuron_ac_get, _rnnlmlib.neuron_ac_set)
    __swig_setmethods__["er"] = _rnnlmlib.neuron_er_set
    __swig_getmethods__["er"] = _rnnlmlib.neuron_er_get
    if _newclass:
        er = _swig_property(_rnnlmlib.neuron_er_get, _rnnlmlib.neuron_er_set)

    def __init__(self):
        this = _rnnlmlib.new_neuron()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rnnlmlib.delete_neuron
    __del__ = lambda self: None
neuron_swigregister = _rnnlmlib.neuron_swigregister
neuron_swigregister(neuron)

class synapse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, synapse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, synapse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["weight"] = _rnnlmlib.synapse_weight_set
    __swig_getmethods__["weight"] = _rnnlmlib.synapse_weight_get
    if _newclass:
        weight = _swig_property(_rnnlmlib.synapse_weight_get, _rnnlmlib.synapse_weight_set)

    def __init__(self):
        this = _rnnlmlib.new_synapse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rnnlmlib.delete_synapse
    __del__ = lambda self: None
synapse_swigregister = _rnnlmlib.synapse_swigregister
synapse_swigregister(synapse)

class vocab_word(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vocab_word, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vocab_word, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cn"] = _rnnlmlib.vocab_word_cn_set
    __swig_getmethods__["cn"] = _rnnlmlib.vocab_word_cn_get
    if _newclass:
        cn = _swig_property(_rnnlmlib.vocab_word_cn_get, _rnnlmlib.vocab_word_cn_set)
    __swig_setmethods__["word"] = _rnnlmlib.vocab_word_word_set
    __swig_getmethods__["word"] = _rnnlmlib.vocab_word_word_get
    if _newclass:
        word = _swig_property(_rnnlmlib.vocab_word_word_get, _rnnlmlib.vocab_word_word_set)
    __swig_setmethods__["prob"] = _rnnlmlib.vocab_word_prob_set
    __swig_getmethods__["prob"] = _rnnlmlib.vocab_word_prob_get
    if _newclass:
        prob = _swig_property(_rnnlmlib.vocab_word_prob_get, _rnnlmlib.vocab_word_prob_set)
    __swig_setmethods__["class_index"] = _rnnlmlib.vocab_word_class_index_set
    __swig_getmethods__["class_index"] = _rnnlmlib.vocab_word_class_index_get
    if _newclass:
        class_index = _swig_property(_rnnlmlib.vocab_word_class_index_get, _rnnlmlib.vocab_word_class_index_set)

    def __init__(self):
        this = _rnnlmlib.new_vocab_word()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rnnlmlib.delete_vocab_word
    __del__ = lambda self: None
vocab_word_swigregister = _rnnlmlib.vocab_word_swigregister
vocab_word_swigregister(vocab_word)

TEXT = _rnnlmlib.TEXT
BINARY = _rnnlmlib.BINARY
COMPRESSED = _rnnlmlib.COMPRESSED
class CRnnLM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRnnLM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRnnLM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alpha_set"] = _rnnlmlib.CRnnLM_alpha_set_set
    __swig_getmethods__["alpha_set"] = _rnnlmlib.CRnnLM_alpha_set_get
    if _newclass:
        alpha_set = _swig_property(_rnnlmlib.CRnnLM_alpha_set_get, _rnnlmlib.CRnnLM_alpha_set_set)
    __swig_setmethods__["train_file_set"] = _rnnlmlib.CRnnLM_train_file_set_set
    __swig_getmethods__["train_file_set"] = _rnnlmlib.CRnnLM_train_file_set_get
    if _newclass:
        train_file_set = _swig_property(_rnnlmlib.CRnnLM_train_file_set_get, _rnnlmlib.CRnnLM_train_file_set_set)

    def __init__(self):
        this = _rnnlmlib.new_CRnnLM()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rnnlmlib.delete_CRnnLM
    __del__ = lambda self: None

    def random(self, min, max):
        return _rnnlmlib.CRnnLM_random(self, min, max)

    def setTrainFile(self, str):
        return _rnnlmlib.CRnnLM_setTrainFile(self, str)

    def setValidFile(self, str):
        return _rnnlmlib.CRnnLM_setValidFile(self, str)

    def setTestFile(self, str):
        return _rnnlmlib.CRnnLM_setTestFile(self, str)

    def setRnnLMFile(self, str):
        return _rnnlmlib.CRnnLM_setRnnLMFile(self, str)

    def setLMProbFile(self, str):
        return _rnnlmlib.CRnnLM_setLMProbFile(self, str)

    def setFileType(self, newt):
        return _rnnlmlib.CRnnLM_setFileType(self, newt)

    def setClassSize(self, newSize):
        return _rnnlmlib.CRnnLM_setClassSize(self, newSize)

    def setOldClasses(self, newVal):
        return _rnnlmlib.CRnnLM_setOldClasses(self, newVal)

    def setLambda(self, newLambda):
        return _rnnlmlib.CRnnLM_setLambda(self, newLambda)

    def setGradientCutoff(self, newGradient):
        return _rnnlmlib.CRnnLM_setGradientCutoff(self, newGradient)

    def setDynamic(self, newD):
        return _rnnlmlib.CRnnLM_setDynamic(self, newD)

    def setGen(self, newGen):
        return _rnnlmlib.CRnnLM_setGen(self, newGen)

    def setIndependent(self, newVal):
        return _rnnlmlib.CRnnLM_setIndependent(self, newVal)

    def setLearningRate(self, newAlpha):
        return _rnnlmlib.CRnnLM_setLearningRate(self, newAlpha)

    def setRegularization(self, newBeta):
        return _rnnlmlib.CRnnLM_setRegularization(self, newBeta)

    def setMinImprovement(self, newMinImprovement):
        return _rnnlmlib.CRnnLM_setMinImprovement(self, newMinImprovement)

    def setHiddenLayerSize(self, newsize):
        return _rnnlmlib.CRnnLM_setHiddenLayerSize(self, newsize)

    def setCompressionLayerSize(self, newsize):
        return _rnnlmlib.CRnnLM_setCompressionLayerSize(self, newsize)

    def setDirectSize(self, newsize):
        return _rnnlmlib.CRnnLM_setDirectSize(self, newsize)

    def setDirectOrder(self, newsize):
        return _rnnlmlib.CRnnLM_setDirectOrder(self, newsize)

    def setBPTT(self, newval):
        return _rnnlmlib.CRnnLM_setBPTT(self, newval)

    def setBPTTBlock(self, newval):
        return _rnnlmlib.CRnnLM_setBPTTBlock(self, newval)

    def setRandSeed(self, newSeed):
        return _rnnlmlib.CRnnLM_setRandSeed(self, newSeed)

    def setDebugMode(self, newDebug):
        return _rnnlmlib.CRnnLM_setDebugMode(self, newDebug)

    def setAntiKasparek(self, newAnti):
        return _rnnlmlib.CRnnLM_setAntiKasparek(self, newAnti)

    def setOneIter(self, newOneIter):
        return _rnnlmlib.CRnnLM_setOneIter(self, newOneIter)

    def getWordHash(self, word):
        return _rnnlmlib.CRnnLM_getWordHash(self, word)

    def readWord(self, word, fin):
        return _rnnlmlib.CRnnLM_readWord(self, word, fin)

    def searchVocab(self, word):
        return _rnnlmlib.CRnnLM_searchVocab(self, word)

    def readWordIndex(self, fin):
        return _rnnlmlib.CRnnLM_readWordIndex(self, fin)

    def addWordToVocab(self, word):
        return _rnnlmlib.CRnnLM_addWordToVocab(self, word)

    def learnVocabFromTrainFile(self):
        return _rnnlmlib.CRnnLM_learnVocabFromTrainFile(self)

    def saveWeights(self):
        return _rnnlmlib.CRnnLM_saveWeights(self)

    def restoreWeights(self):
        return _rnnlmlib.CRnnLM_restoreWeights(self)

    def saveContext(self):
        return _rnnlmlib.CRnnLM_saveContext(self)

    def restoreContext(self):
        return _rnnlmlib.CRnnLM_restoreContext(self)

    def saveContext2(self):
        return _rnnlmlib.CRnnLM_saveContext2(self)

    def restoreContext2(self):
        return _rnnlmlib.CRnnLM_restoreContext2(self)

    def initNet(self):
        return _rnnlmlib.CRnnLM_initNet(self)

    def saveNet(self):
        return _rnnlmlib.CRnnLM_saveNet(self)

    def goToDelimiter(self, delim, fi):
        return _rnnlmlib.CRnnLM_goToDelimiter(self, delim, fi)

    def restoreNet(self):
        return _rnnlmlib.CRnnLM_restoreNet(self)

    def netFlush(self):
        return _rnnlmlib.CRnnLM_netFlush(self)

    def netReset(self):
        return _rnnlmlib.CRnnLM_netReset(self)

    def computeNet(self, last_word, word):
        return _rnnlmlib.CRnnLM_computeNet(self, last_word, word)

    def learnNet(self, last_word, word):
        return _rnnlmlib.CRnnLM_learnNet(self, last_word, word)

    def copyHiddenLayerToInput(self):
        return _rnnlmlib.CRnnLM_copyHiddenLayerToInput(self)

    def trainNet(self):
        return _rnnlmlib.CRnnLM_trainNet(self)

    def useLMProb(self, use):
        return _rnnlmlib.CRnnLM_useLMProb(self, use)

    def testNet(self):
        return _rnnlmlib.CRnnLM_testNet(self)

    def testNetOne(self, line):
        return _rnnlmlib.CRnnLM_testNetOne(self, line)

    def testNbest(self):
        return _rnnlmlib.CRnnLM_testNbest(self)

    def testGen(self):
        return _rnnlmlib.CRnnLM_testGen(self)

    def matrixXvector(self, dest, srcvec, srcmatrix, matrix_width, arg6, to, from2, to2, type):
        return _rnnlmlib.CRnnLM_matrixXvector(self, dest, srcvec, srcmatrix, matrix_width, arg6, to, from2, to2, type)
CRnnLM_swigregister = _rnnlmlib.CRnnLM_swigregister
CRnnLM_swigregister(CRnnLM)
cvar = _rnnlmlib.cvar
PRIMES = cvar.PRIMES
PRIMES_SIZE = cvar.PRIMES_SIZE
MAX_NGRAM_ORDER = cvar.MAX_NGRAM_ORDER

# This file is compatible with both classic and new-style classes.


